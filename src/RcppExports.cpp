// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_mean_titer_negll
double calc_mean_titer_negll(const double& predicted_mean, const arma::vec& max_titers, const arma::vec& min_titers, const double& titer_sd);
RcppExport SEXP _ablandscapes_calc_mean_titer_negll(SEXP predicted_meanSEXP, SEXP max_titersSEXP, SEXP min_titersSEXP, SEXP titer_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type predicted_mean(predicted_meanSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type max_titers(max_titersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type min_titers(min_titersSEXP);
    Rcpp::traits::input_parameter< const double& >::type titer_sd(titer_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mean_titer_negll(predicted_mean, max_titers, min_titers, titer_sd));
    return rcpp_result_gen;
END_RCPP
}
// calc_mean_titer_negll_without_sd
double calc_mean_titer_negll_without_sd(const arma::vec& pars, const arma::vec& max_titers, const arma::vec& min_titers);
RcppExport SEXP _ablandscapes_calc_mean_titer_negll_without_sd(SEXP parsSEXP, SEXP max_titersSEXP, SEXP min_titersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type max_titers(max_titersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type min_titers(min_titersSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mean_titer_negll_without_sd(pars, max_titers, min_titers));
    return rcpp_result_gen;
END_RCPP
}
// negll_titer_lm
double negll_titer_lm(const arma::vec& par, const arma::mat& max_titers, const arma::mat& min_titers, const arma::mat& ag_coords, const arma::vec& ag_weights, const double& error_sd);
RcppExport SEXP _ablandscapes_negll_titer_lm(SEXP parSEXP, SEXP max_titersSEXP, SEXP min_titersSEXP, SEXP ag_coordsSEXP, SEXP ag_weightsSEXP, SEXP error_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type max_titers(max_titersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type min_titers(min_titersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ag_coords(ag_coordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ag_weights(ag_weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type error_sd(error_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(negll_titer_lm(par, max_titers, min_titers, ag_coords, ag_weights, error_sd));
    return rcpp_result_gen;
END_RCPP
}
// negll_lndscp_height
double negll_lndscp_height(arma::vec par, const double& lndscp_height, const arma::mat& max_titers, const arma::mat& min_titers, const arma::mat& ag_coords, const arma::vec& ag_weights, const double& error_sd);
RcppExport SEXP _ablandscapes_negll_lndscp_height(SEXP parSEXP, SEXP lndscp_heightSEXP, SEXP max_titersSEXP, SEXP min_titersSEXP, SEXP ag_coordsSEXP, SEXP ag_weightsSEXP, SEXP error_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const double& >::type lndscp_height(lndscp_heightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type max_titers(max_titersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type min_titers(min_titersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ag_coords(ag_coordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ag_weights(ag_weightsSEXP);
    Rcpp::traits::input_parameter< const double& >::type error_sd(error_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(negll_lndscp_height(par, lndscp_height, max_titers, min_titers, ag_coords, ag_weights, error_sd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ablandscapes_calc_mean_titer_negll", (DL_FUNC) &_ablandscapes_calc_mean_titer_negll, 4},
    {"_ablandscapes_calc_mean_titer_negll_without_sd", (DL_FUNC) &_ablandscapes_calc_mean_titer_negll_without_sd, 3},
    {"_ablandscapes_negll_titer_lm", (DL_FUNC) &_ablandscapes_negll_titer_lm, 6},
    {"_ablandscapes_negll_lndscp_height", (DL_FUNC) &_ablandscapes_negll_lndscp_height, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ablandscapes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
